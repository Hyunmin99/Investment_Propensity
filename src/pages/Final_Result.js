import React, { useState } from "react";
import "../App.css";
import Header from "../component/Header";
import QNA from "../content/QNA";
import CLASSIFY from "../content/CLASSIFY";
import FINAL_TYPE from "../content/FINAL_TYPE";
import RESULT from "../content/RESULT";
import CircularBar from "../component/CircularBar";
import {
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar,
} from "recharts";
import Box from "@mui/material/Box";
import Tabs from "@mui/material/Tabs";
import Tab from "@mui/material/Tab";
import GBIGraph from "../component/GBIGraph";
import Retirement from "../component/Retirement";
import ProfitGraph from "../component/ProfitGraph";
import NextButton from "../component/NextButton";

function Final_Result(props) {
  const Res = props.location.state.Res;
  console.log(Res);

  //Ìà¨ÏûêÎ™©Ï†Å, ÏúÑÌóòÍ∞êÎÇ¥ÎèÑ, Í∏àÏúµÏù¥Ìï¥ÎèÑ, Ìà¨ÏûêÍ≤ΩÌóò Ïù∏Îç±Ïä§ (Îì±Í∏â, Ï†êÏàò Ïó∞Í≤∞)
  function formula_Index(Score) {
    const Index =
      Score >= 100
        ? 4 - parseInt(99 / 25)
        : Score < 0
        ? 4 - parseInt(1 / 25)
        : 4 - parseInt(Score / 25);
    console.log("**formula_Index", Score, Index);

    return Index;
  }

  //Í∞Å Î¨∏Ìï≠ Ï†êÏàò Î∞õÏïÑÏò§Í∏∞: 
  function getScore(questionID) {
    const Tdata = QNA[QNA.findIndex((data) => data.questionID === questionID)];

    if (Tdata.Type === "SingleSel") {
      return Tdata.Answers[
        Tdata.Answers.findIndex((d) => d.id === Res[questionID])
      ].Score;
    } else if (Tdata.Type === "MultiSel") {
      let Score = 0;

      for (let i = 0; i < Res[questionID].length; i++) {
        Score =
          Score +
          Tdata.Answers[
            Tdata.Answers.findIndex((d) => d.id === Res[questionID][i])
          ].Score;
      }
      return Score;
    }
  }

  function find_ResultData(Type, Index) {
    console.log("**find_ResultData", Type, Index);
    return RESULT[Type][
      RESULT[Type].findIndex((data) => data.Index === Index)
    ];
  }

  const PERIOD = find_ResultData("PERIOD", Res[1]);
  const PURPOSE = find_ResultData(
    "PURPOSE",
    formula_Index((getScore(2) + getScore(7)) / 2)
  );
  const TOLERANCE = find_ResultData(
    "TOLERANCE",
    formula_Index((getScore(3) + getScore(4))/2 + getScore(8))
  );
  const LITERACY = find_ResultData(
    "LITERACY",
    formula_Index(getScore(5) + getScore(10) + getScore(11))
  );
  const EXPERIENCE = find_ResultData(
    "EXPERIENCE",
    formula_Index((getScore(6) + getScore(13)) / 2)
  );
  const AGE = find_ResultData("AGE", Res[14]);
  const INCOME = find_ResultData("INCOME", Res[15]);
  const PROPERTY = find_ResultData("PROPERTY", Res[16]);
  // Î≥¥Ïú†Ìö®Í≥º
  const STATUSQUO = find_ResultData("STATUSQUO", Res[12]);
  // Î≥¥Ïú†Ìö®Í≥º
  const ENDOWMENT = find_ResultData("ENDOWMENT", Res[9]);
  // ÏÜêÏã§ÌöåÌîº
  let LOSSAVERSION = -1;
  if (TOLERANCE.Grade === 1) {
    LOSSAVERSION = find_ResultData("LOSSAVERSION", 4);
  } else {
    for (let i = 0; i < RESULT.LOSSAVERSION.length; i++) {
      if (
        RESULT.LOSSAVERSION[i].Range.includes(
          PURPOSE.Grade - TOLERANCE.Grade
        )
      )
        LOSSAVERSION = find_ResultData("LOSSAVERSION", i + 1);
    }
  }
  // ÏÑ±Í≥ºÏ∂îÏ¢Ö
  let PERFORMANCE = -1;
  for (let i = 0; i < RESULT.PERFORMANCE.length; i++) {
    if (RESULT.PERFORMANCE[i].Range.includes(Res[9] - Res[4]))
      PERFORMANCE = find_ResultData("PERFORMANCE", i + 1);
  }
  // ÏûêÍ∏∞Í≥ºÏã†
  const OVERCONFIDENCE = find_ResultData("OVERCONFIDENCE", Res[12]);

  const BEHAVIOR = [
    { column: "ÌòÑÏÉÅÏú†ÏßÄ", value: 5 - STATUSQUO.Grade, fullMark: 5 },
    { column: "Î≥¥Ïú†Ìö®Í≥º", value: 5 - ENDOWMENT.Grade, fullMark: 5 },
    { column: "ÏÜêÏã§ÌöåÌîº", value: 5 - LOSSAVERSION.Grade, fullMark: 5 },
    { column: "ÏÑ±Í≥ºÏ∂îÏ¢Ö", value: 5 - PERFORMANCE.Grade, fullMark: 5 },
    { column: "ÏûêÍ∏∞Í≥ºÏã†", value: 5 - OVERCONFIDENCE.Grade, fullMark: 5 },
  ];
  console.log(BEHAVIOR);
  const tick = [0, 1, 2, 3, 4];
  const formatTick = (tickItem) => {
    // if (tickItem)
    // console.log(tickItem)
    if (tickItem === 0) return "";
    else return `${5-tickItem}`
  }

  //ÌÜ†ÌÉà Ï†êÏàò Í≥ÑÏÇ∞
  const Score =
    PURPOSE.Value +
    TOLERANCE.Value +
    LITERACY.Value +
    EXPERIENCE.Value +
    PERIOD.Value +
    AGE.Value +
    INCOME.Value +
    PROPERTY.Value;

  console.log("Ìà¨ÏûêÏÑ±Ìñ•Ï†êÏàò",Score);

  const Class = CLASSIFY[CLASSIFY.findIndex((c) => c.id === 2)];
  function SetType(Score, PURPOSE, TOLERANCE) {
    const Classify =
      Class.Í≥µÍ≤©Ìà¨ÏûêÌòï[0] <= Score && Score <= Class.Í≥µÍ≤©Ìà¨ÏûêÌòï[1]
        ? "Í≥µÍ≤©Ìà¨Ïûê"
        : Class.Ï†ÅÍ∑πÌà¨ÏûêÌòï[0] <= Score && Score <= Class.Ï†ÅÍ∑πÌà¨ÏûêÌòï[1]
        ? "Ï†ÅÍ∑πÌà¨Ïûê"
        : Class.ÏúÑÌóòÏ§ëÎ¶ΩÌòï[0] <= Score && Score <= Class.ÏúÑÌóòÏ§ëÎ¶ΩÌòï[1]
        ? "ÏúÑÌóòÏ§ëÎ¶Ω"
        : Class.ÏïàÏ†ïÏ∂îÍµ¨Ìòï[0] <= Score && Score <= Class.ÏïàÏ†ïÏ∂îÍµ¨Ìòï[1]
        ? "ÏïàÏ†ïÏ∂îÍµ¨"
        : Class.ÏïàÏ†ïÌòï[0] <= Score && Score <= Class.ÏïàÏ†ïÌòï[1]
        ? "ÏïàÏ†ïÌòï"
        : console.log("No Result");

    const TypeNum =
      Classify === "ÏïàÏ†ïÌòï"
        ? ""
        : TOLERANCE.Grade === 1 || PURPOSE > TOLERANCE
        ? "Type1 "
        : PURPOSE === TOLERANCE
        ? "Type2 "
        : PURPOSE < TOLERANCE
        ? "Type3 "
        : console.log("Type Ï≤¥ÌÅ¨ ÏóêÎü¨");
    const Char = Classify + " " + TypeNum + "Ï∫êÎ¶≠ÌÑ∞";
    return Char;
  }

  const Type =
    FINAL_TYPE[
      FINAL_TYPE.findIndex(
        (type) => type.Char === SetType(Score, PURPOSE.Grade, TOLERANCE.Grade)
      )
    ];
  // const MONEY = Res[16];
  const MIN = Type.Min;
  const MAX = Type.Max;
  const PRO = Type.Profit;

  //Tab
  const [graph, setGraph] = useState(0);

  const handleChange = (event, newValue) => {
    setGraph(newValue);
  };

  return (
    <div className="App">
      <Header history={props.history} />
      <div className="Result">
        <div>
          <div>
            <div className="Quest">
              <div
                style={{
                  fontSize: "20px",
                  fontWeight: "700",
                  fontFamily: "DungGeunMo",
                }}
              >
                Quest
              </div>
              <div>{PERIOD.Quest}</div>
            </div>
            {/* <img className='TypeImage'></img> */}
            {/* <div className="TypeImage"></div> */}
            <h1
              style={{
                color: "#fefefe",
                fontFamily: "DungGeunMo",
                padding: "0.5rem",
              }}
            >
              {Type.Char}
            </h1>
          </div>

          <div className="Explain">
            <h3 style={{ margin: "0", paddingBottom: "0.8rem" }}>
              üòé ÎãπÏã†Ïùò Ï∫êÎ¶≠ÌÑ∞Îäî...
            </h3>
            <div className="CharInfo">
              {/* Ï≤´Î≤àÏß∏ ÏπºÎüº: Îì±Í∏âÌëú */}
              <div className="Table">
                <CircularBar Type="Ìà¨Ïûê Î™©Ï†Å" Grade={PURPOSE.Grade} />
                <CircularBar Type="ÏúÑÌóò Í∞êÎÇ¥ÎèÑ" Grade={TOLERANCE.Grade} />
                <CircularBar Type="Í∏àÏúµ Ïù¥Ìï¥ÎèÑ" Grade={LITERACY.Grade} />
                <CircularBar Type="Ìà¨Ïûê Í≤ΩÌóò" Grade={EXPERIENCE.Grade} />
              </div>
              {/* 2Î≤àÏß∏ ÏπºÎüº: ÏïÑÏù¥ÌÖú */}
              <div className="Bag">
                <div className="Items">
                  <div className="ItemImg">
                    <img
                      width={42}
                      height={42}
                      src={LITERACY.Img}
                      alt="Î¨¥Í∏∞ Ïù¥ÎØ∏ÏßÄ"
                    />
                  </div>
                  <div
                    style={{
                      marginTop: "auto",
                      marginBottom: "auto",
                      marginLeft: "0.5rem",
                    }}
                  >
                    <b>{LITERACY.Weapon}</b> <br />
                    {LITERACY.Level}
                  </div>
                </div>
                <div className="Items">
                  <div className="ItemImg">
                    <img
                      width={42}
                      height={42}
                      src={TOLERANCE.Img}
                      alt="Î∞©Ìå® Ïù¥ÎØ∏ÏßÄ"
                    />
                  </div>
                  <div
                    style={{
                      marginTop: "auto",
                      marginBottom: "auto",
                      marginLeft: "0.5rem",
                    }}
                  >
                    <b>{TOLERANCE.Shield}</b> <br />
                    {TOLERANCE.Level}
                  </div>
                </div>
              </div>
            </div>
            {/* Ï∫êÎ¶≠ÌÑ∞ ÏÑ§Î™Ö */}
            <div>
              <p style={{ lineHeight: "1.5rem" }}>{Type.Content}</p>
            </div>
            <h3 style={{ margin: "0", paddingBottom: "0.8rem" }}>
              ü§î Ï∫êÎ¶≠ÌÑ∞Ïùò ÌäπÏßïÏùÄ...
            </h3>
            <div
              style={{
                display: "flex",
                alignItems: "center",
                // Î∞ëÏóê 2Ï§Ñ Devider
                borderBottom: "solid 1px #e0e0e0",
                paddingBottom: "1.2rem",
              }}
            >
              <RadarChart
                outerRadius={60}
                width={260}
                height={160}
                style={{ display: "flex" }}
                data={BEHAVIOR}
              >
                <PolarGrid />
                <PolarAngleAxis dataKey="column" style={{ fontSize: "14px" }} />
                <PolarRadiusAxis
                  angle={90}
                  ticks={tick}
                  tickFormatter={formatTick}
                  style={{ fontSize: "12px" }}
                />
                <Radar
                  name=""
                  dataKey="value"
                  stroke="#FFB950"
                  fill="#FFB950"
                  fillOpacity={0.6}
                />
              </RadarChart>
              <div className="Behavior">
                <b>ÌòÑÏÉÅÏú†ÏßÄ</b>: {STATUSQUO.Grade}Îì±Í∏â <br />
                <b>Î≥¥Ïú†Ìö®Í≥º</b>: {ENDOWMENT.Grade}Îì±Í∏â <br />
                <b>ÏÜêÏã§ÌöåÌîº</b>: {LOSSAVERSION.Grade}Îì±Í∏â <br />
                <b>ÏÑ±Í≥ºÏ∂îÏ¢Ö</b>: {PERFORMANCE.Grade}Îì±Í∏â <br />
                <b>ÏûêÍ∏∞Í≥ºÏã†</b>: {OVERCONFIDENCE.Grade}Îì±Í∏â
              </div>
            </div>
            {/* Tab - Í∑∏ÎûòÌîÑ ÌëúÏãú */}
            <Box sx={{ width: "100%", bgcolor: "background.paper" }}>
              <Tabs value={graph} onChange={handleChange} variant="fullWidth">
                <Tab label="ÏòàÏÉÅ ÏàòÏùµÎ•†" />
                <Tab label="Îã®Í∏∞ GBI" />
                <Tab label="ÏùÄÌá¥ Í≥ÑÏÇ∞Í∏∞" />
              </Tabs>
            </Box>
            {graph === 0 ? (
              <ProfitGraph Min={MIN} Max={MAX} Pro={PRO} />
            ) : graph === 1 ? (
              <GBIGraph Min={MIN} Max={MAX} Pro={PRO} />
            ) : (
              graph === 2 && (
                <Retirement Pro={PRO} Min={MIN} Max={MAX} Age={AGE.Average} />
              )
            )}
          </div>
        </div>
        <NextButton Path={"/"} Text={"ÌÖåÏä§Ìä∏ Îã§ÏãúÌïòÍ∏∞"} />
        <div
          style={{
            fontSize: "0.8rem",
            color: "#A7A8A3",
            textAlign: "left",
            padding: "1rem",
          }}
        >
          - ÏπºÍ≥º Î∞©Ìå®Îäî Í∞ÅÍ∞Å Í∏àÏúµÏù¥Ìï¥ÎèÑÏôÄ ÏúÑÌóòÍ∞êÎÇ¥ÎèÑÎ°ú Ï†ïÌï¥ÏßëÎãàÎã§. <br />
          - ÌòÑÏû¨ Í∞ÄÏπòÎäî ÎØ∏ÎûòÏùò Í∞ÄÏπòÎ•º ÌòÑÏû¨Î•º Í∏∞Ï§ÄÏúºÎ°ú ÌôòÏÇ∞Ìïú Í∏àÏï°ÏûÖÎãàÎã§. <br />
          - ÌòÑÏû¨ Í∞ÄÏπòÎäî Î¨ºÍ∞ÄÏÉÅÏäπÎ•†(2021ÎÖÑ Í∏∞Ï§Ä 2%)ÏùÑ Î∞òÏòÅÌï¥ Í≥ÑÏÇ∞Îê©ÎãàÎã§.
          <br />
        </div>
      </div>
    </div>
  );
}

export default Final_Result;
