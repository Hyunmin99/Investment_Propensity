{"ast":null,"code":"var _jsxFileName = \"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/Graph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Area, Line } from 'recharts';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Slider from '@mui/material/Slider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graph(_ref) {\n  _s();\n\n  let {\n    P,\n    A,\n    Min,\n    Max,\n    Rev\n  } = _ref;\n  const year = [0, 5, 10, 15, 20, 25, 30, 35, 40];\n  const inflationRate = 2; //물가 상승률\n\n  console.log(P, A, Min, Max, Rev);\n\n  function cov_Money(Money) {\n    let scaledValue = Money;\n\n    if (scaledValue < 10000) {\n      scaledValue = Math.round(scaledValue / 10) * 10;\n    }\n\n    while (scaledValue >= 10000) {\n      scaledValue /= 10000;\n    }\n\n    return parseInt(scaledValue);\n  }\n\n  function cov_Units(Money) {\n    const units = ['만원', '억원'];\n    let unitIndex = 0;\n\n    while (Money >= 10000 && unitIndex < units.length - 1) {\n      unitIndex += 1;\n      Money /= 10000;\n    }\n\n    return units[unitIndex];\n  }\n\n  const covMoney = cov_Money(P);\n  const covUnits = cov_Units(P);\n  const [Period, getPeriod] = useState(15); //단리 계산\n  // function Cal_Simple(t) {\n  //     const obj = {\n  //         \"year\": t+'년',\n  //         \"예상수익범위\": [Math.round((covMoney+(Min/100*covMoney)*(t)) * 1e2) / 1e2, \n  //         Math.round((covMoney+(Max/100*covMoney)*(t)) * 1e2) / 1e2],\n  //         \"예상수익\": Math.round((covMoney+(Rev/100*covMoney)*(t)) * 1e2) / 1e2, \n  //         \"현재가치\": (Math.round((covMoney+(Rev/100*covMoney)*(t)) * 1e2) / 1e2) / ((1+inflationRate/100)**t)\n  //     };\n  //     return obj;\n  // }\n  //복리 계산\n\n  function Cal_Compound(t) {\n    const obj = {\n      \"year\": t + '년',\n      \"예상수익범위\": [Math.round(covMoney * (Min / 100 + 1) ** t * 1e2) / 1e2, Math.round(covMoney * (Max / 100 + 1) ** t * 1e2) / 1e2],\n      \"예상수익\": Math.round(covMoney * (Rev / 100 + 1) ** t * 1e2) / 1e2,\n      \"현재가치\": Math.round(covMoney * (Rev / 100 + 1) ** t / (1 + inflationRate / 100) ** t * 1e2) / 1e2\n    };\n    console.log(obj);\n    return obj;\n  } //적립식 복리 계산\n  //답업워\n  //데이터 세팅\n\n\n  const data = year.map(function (t) {\n    return Cal_Compound(t);\n  }); //기간 세팅\n\n  function valueText(value) {\n    return `${value}년 뒤`;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ComposedChart, {\n      width: 400,\n      height: 250,\n      margin: {\n        top: 20,\n        bottom: 20\n      },\n      data: data,\n      children: [/*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"year\",\n        tick: {\n          fontSize: 10\n        },\n        padding: {\n          right: 20\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        unit: covUnits,\n        tick: {\n          fontSize: 10\n        },\n        padding: {\n          bottom: 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {\n        tick: {\n          fontSize: 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n        stroke: \"#f4f4f4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        unit: covUnits,\n        type: \"monotone\",\n        dataKey: \"\\uC608\\uC0C1\\uC218\\uC775\\uBC94\\uC704\",\n        fill: \"#FFB950\",\n        stroke: \"#FFB950\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        unit: covUnits,\n        type: \"monotone\",\n        dataKey: \"\\uC608\\uC0C1\\uC218\\uC775\",\n        stroke: \"#1D1A82\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        unit: covUnits,\n        type: \"monotone\",\n        dataKey: \"\\uD604\\uC7AC\\uAC00\\uCE58\",\n        stroke: \"#B45CCA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: 300\n      },\n      children: /*#__PURE__*/_jsxDEV(Slider, {\n        value: Period,\n        \"aria-label\": \"Year\",\n        getAriaValueText: valueText,\n        valueLabelDisplay: \"auto\",\n        step: 5,\n        min: 0,\n        max: 40,\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Graph, \"vvpA2h5yWMX4awlb5FT7ry7ORX8=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/Graph.js"],"names":["React","useState","ComposedChart","XAxis","YAxis","Tooltip","Legend","CartesianGrid","Area","Line","Box","Typography","Slider","Graph","P","A","Min","Max","Rev","year","inflationRate","console","log","cov_Money","Money","scaledValue","Math","round","parseInt","cov_Units","units","unitIndex","length","covMoney","covUnits","Period","getPeriod","Cal_Compound","t","obj","data","map","valueText","value","top","bottom","fontSize","right","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Area, Line } from 'recharts';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Slider from '@mui/material/Slider';\n\nfunction Graph({ P, A, Min, Max, Rev }) {\n    const year = [0, 5, 10, 15, 20, 25, 30, 35, 40];\n    const inflationRate = 2; //물가 상승률\n    console.log(P, A, Min, Max, Rev);\n    function  cov_Money(Money) {\n      \n        let scaledValue = Money;\n          \n        if(scaledValue < 10000) {\n          scaledValue = Math.round(scaledValue/10)*10;\n        }\n\n        while (scaledValue >= 10000) {\n            scaledValue /= 10000;\n        }\n        return parseInt(scaledValue);\n    }\n\n    function  cov_Units(Money) {\n        const units = ['만원', '억원'];\n        let unitIndex = 0;\n\n        while (Money >= 10000 && unitIndex < units.length - 1) {\n            unitIndex += 1;\n            Money /= 10000;\n        }\n        return units[unitIndex];\n    }\n\n    const covMoney = cov_Money(P);\n    const covUnits = cov_Units(P);\n    const [Period, getPeriod] = useState(15);\n\n    //단리 계산\n    // function Cal_Simple(t) {\n    //     const obj = {\n    //         \"year\": t+'년',\n    //         \"예상수익범위\": [Math.round((covMoney+(Min/100*covMoney)*(t)) * 1e2) / 1e2, \n    //         Math.round((covMoney+(Max/100*covMoney)*(t)) * 1e2) / 1e2],\n    //         \"예상수익\": Math.round((covMoney+(Rev/100*covMoney)*(t)) * 1e2) / 1e2, \n    //         \"현재가치\": (Math.round((covMoney+(Rev/100*covMoney)*(t)) * 1e2) / 1e2) / ((1+inflationRate/100)**t)\n    //     };\n    //     return obj;\n    // }\n\n    //복리 계산\n    function Cal_Compound(t) {\n        const obj = {\n            \"year\": t+'년',\n            \"예상수익범위\": [Math.round(covMoney*((Min/100+1)**(t)) * 1e2) / 1e2, Math.round(covMoney*((Max/100+1)**(t)) * 1e2) / 1e2],\n            \"예상수익\": Math.round(covMoney*((Rev/100+1)**(t)) * 1e2) / 1e2, \n            \"현재가치\": Math.round(covMoney*((Rev/100+1)**(t)) / ((1+inflationRate/100)**t) * 1e2) / 1e2\n        };\n        console.log(obj);\n        return obj;\n    }\n\n    //적립식 복리 계산\n    //답업워\n\n    //데이터 세팅\n    const data = year.map(function(t){\n        return Cal_Compound(t);\n    });\n\n    //기간 세팅\n    function valueText(value) {\n        return `${value}년 뒤`\n    }\n\n    return (\n        <div>\n            <ComposedChart width={400} height={250} margin={{top: 20, bottom: 20}} data={data}>\n                <XAxis dataKey=\"year\" tick={{fontSize: 10}} padding={{right: 20}}/>\n                <YAxis unit={covUnits} tick={{fontSize: 10}} padding={{bottom: 10}} />\n                <Tooltip />\n                <Legend tick={{fontSize: 10}} />\n                <CartesianGrid stroke=\"#f4f4f4\" />\n                <Area unit={covUnits} type=\"monotone\" dataKey=\"예상수익범위\" fill=\"#FFB950\" stroke=\"#FFB950\"/>\n                <Line unit={covUnits} type=\"monotone\" dataKey=\"예상수익\" stroke=\"#1D1A82\" />\n                <Line unit={covUnits} type=\"monotone\" dataKey=\"현재가치\" stroke=\"#B45CCA\" />\n            </ComposedChart>\n\n            <Box sx={{ width: 300}}>\n                <Slider\n                value={Period}\n                aria-label='Year'\n                getAriaValueText={valueText}\n                valueLabelDisplay='auto'\n                step={5}\n                min={0}\n                max={40}\n                size=\"small\"\n            />\n            </Box>\n        </div>\n    );\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}