{"ast":null,"code":"var _jsxFileName = \"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/Graph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Area, Line } from 'recharts';\nimport Box from '@mui/material/Box';\nimport Slider from '@mui/material/Slider';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graph(_ref) {\n  _s();\n\n  let {\n    P,\n    Min,\n    Max,\n    Rev\n  } = _ref;\n  const year = [0, 5, 10, 15, 20, 25, 30, 35, 40];\n  const Contribution = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]; //적립금액\n\n  const inflationRate = 2; //물가 상승률\n\n  function cov_Money(Money) {\n    let scaledValue = Money;\n\n    if (scaledValue < 10000) {\n      scaledValue = Math.round(scaledValue / 10) * 10;\n    }\n\n    while (scaledValue >= 10000) {\n      scaledValue /= 10000;\n    }\n\n    return parseInt(scaledValue);\n  }\n\n  function cov_Units(Money) {\n    const units = ['만원', '억원'];\n    let unitIndex = 0;\n\n    while (Money >= 10000 && unitIndex < units.length - 1) {\n      unitIndex += 1;\n      Money /= 10000;\n    }\n\n    return units[unitIndex];\n  }\n\n  const covMoney = cov_Money(P);\n  const covUnits = cov_Units(P);\n  const [Period, getPeriod] = useState(15);\n  const [PMT, getPMT] = useState(0); //소수점 둘째 자리 반올림\n\n  function round_two(float) {\n    return Math.round(float * 1e2) / 1e2;\n  } //단리 공식\n\n\n  function formula_Simple(r, t) {\n    return covMoney + r / 100 * covMoney * t;\n  } //복리 공식\n\n\n  function formula_Compound(r, t) {\n    return covMoney * (r / 100 + 1) ** t;\n  } //적립식 복리 공식\n\n\n  function formula_Contribute(r, t) {\n    return PMT * ((1 + r / 100) ** t - 1) / (r / 100);\n  } //현재가치 공식\n\n\n  function formula_PV(FV, t) {\n    return FV / (1 + inflationRate / 100) ** t;\n  } //단리 계산\n  // function Cal_Simple(t) {\n  //     const obj = {\n  //         \"year\": t+'년',\n  //         \"예상수익범위\": [Math.round((covMoney+(Min/100*covMoney)*(t)) * 1e2) / 1e2, \n  //         Math.round((covMoney+(Max/100*covMoney)*(t)) * 1e2) / 1e2],\n  //         \"예상수익\": Math.round((covMoney+(Rev/100*covMoney)*(t)) * 1e2) / 1e2, \n  //         \"현재가치\": (Math.round((covMoney+(Rev/100*covMoney)*(t)) * 1e2) / 1e2) / ((1+inflationRate/100)**t)\n  //     };\n  //     return obj;\n  // }\n  //복리 계산\n  //*년복리\n  //P는 원금, r은 이자율, t는 기간\n  //Compound Formula: P * ((r% + 1)** t) \n\n\n  function Cal_Compound(t) {\n    const obj = {\n      \"year\": t + '년',\n      \"예상수익범위\": [Math.round(covMoney * (Min / 100 + 1) ** t * 1e2) / 1e2, Math.round(covMoney * (Max / 100 + 1) ** t * 1e2) / 1e2],\n      \"예상수익\": Math.round(covMoney * (Rev / 100 + 1) ** t * 1e2) / 1e2,\n      \"현재가치\": Math.round(covMoney * (Rev / 100 + 1) ** t / (1 + inflationRate / 100) ** t * 1e2) / 1e2\n    };\n    return obj;\n  } //적립식 복리 계산\n  //*년복리\n  //P는 원금, r은 이자율, t는 기간, PMT는 적립금액 //PMT * (((1 + r/100) ** t) -1) / (r/100)\n  //Compound Formula: P * ((r% + 1)** t) \n  //Contribution Compound Formula(End of Period): PMT * (((1 + r%) ** t) -1) / r%\n  //Contribution Compound Formula(Start of Period): PMT * ((((1 + r%) ** t) -1) / r%) * (1 + r%)\n  //Compound + Contribution Compound\n  // function Cal_Compound_Contribution(t) {\n  //     const obj = {\n  //         \"year\": t+'년',\n  //         \"예상수익범위\": [Math.round((covMoney*((Min/100+1)**(t)) + PMT * (((1 + Min/100) ** t) -1) / (Min/100)) * 1e2) / 1e2, \n  //         Math.round((covMoney*((Max/100+1)**(t)) + PMT * (((1 + Max/100) ** t) -1) / (Max/100)) * 1e2) / 1e2],\n  //         \"예상수익\": Math.round((covMoney*((Rev/100+1)**(t)) + PMT * (((1 + Rev/100) ** t) -1) / (Rev/100)) * 1e2) / 1e2, \n  //         \"현재가치\": Math.round((covMoney*((Rev/100+1)**(t)) + PMT * (((1 + Rev/100) ** t) -1) / (Rev/100)) / ((1+inflationRate/100)**t) * 1e2) / 1e2\n  //     };\n  //     return obj;\n  // }\n\n\n  function Cal_Compound_Contribution(t) {\n    const MIN_VALUE = formula_Compound(Min, t) + formula_Contribute(Min, t);\n    const MAX_VALUE = formula_Compound(Max, t) + formula_Contribute(Max, t);\n    const REV_VALUE = formula_Compound(Rev, t) + formula_Contribute(Rev, t);\n    const obj = {\n      \"year\": t + '년',\n      \"예상수익범위\": [round_two(MIN_VALUE), round_two(MAX_VALUE)],\n      \"예상수익\": round_two(REV_VALUE),\n      \"현재가치\": round_two(formula_PV(REV_VALUE, t))\n    };\n    return obj;\n  } //데이터 세팅\n\n\n  const data = year.map(function (t) {\n    return Cal_Compound_Contribution(t);\n  }); //기간 세팅\n\n  function valueText(value) {\n    return `${value}년 뒤`;\n  } //Slider handleChange\n\n\n  const SLI_handleChange = (event, newValue) => {\n    if (typeof newValue === 'number') {\n      getPeriod(newValue);\n    }\n  }; //Select Box handleChange\n\n\n  const SEL_handleChange = event => {\n    getPMT(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ComposedChart, {\n      width: 400,\n      height: 250,\n      margin: {\n        top: 20,\n        bottom: 20\n      },\n      data: data,\n      children: [/*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"year\",\n        tick: {\n          fontSize: 10\n        },\n        padding: {\n          right: 20\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        unit: covUnits,\n        tick: {\n          fontSize: 10\n        },\n        padding: {\n          bottom: 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {\n        tick: {\n          fontSize: 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n        stroke: \"#f4f4f4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        unit: covUnits,\n        type: \"monotone\",\n        dataKey: \"\\uC608\\uC0C1\\uC218\\uC775\\uBC94\\uC704\",\n        fill: \"#FFB950\",\n        stroke: \"#FFB950\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        unit: covUnits,\n        type: \"monotone\",\n        dataKey: \"\\uC608\\uC0C1\\uC218\\uC775\",\n        stroke: \"#1D1A82\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        unit: covUnits,\n        type: \"monotone\",\n        dataKey: \"\\uD604\\uC7AC\\uAC00\\uCE58\",\n        stroke: \"#B45CCA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tableStyle\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"Row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ColumnValue\",\n          children: \"\\uC608\\uC0C1 \\uC218\\uC775\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ColumnValue\",\n          children: \"\\uD604\\uC7AC \\uAC00\\uCE58\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"Row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ColumnValue\",\n          children: [data[Period / 5].예상수익, covUnits]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ColumnValue\",\n          children: [data[Period / 5].현재가치, covUnits]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: valueText(Period)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: 300,\n          display: 'inline-block'\n        },\n        children: /*#__PURE__*/_jsxDEV(Slider, {\n          value: Period,\n          \"aria-label\": \"Year\",\n          getAriaValueText: valueText,\n          valueLabelFormat: valueText,\n          valueLabelDisplay: \"auto\",\n          onChange: SLI_handleChange,\n          step: 5,\n          min: 0,\n          max: 40,\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: 300,\n          display: 'inline-block'\n        },\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"contribution-select-label\",\n            children: \"\\uB0A9\\uC785\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"contribution-select-label\",\n            id: \"contribution-select\",\n            value: PMT,\n            label: \"\\uB9CC\\uC6D0\",\n            onChange: SEL_handleChange,\n            defaultValue: 0,\n            children: Contribution.map((Value, index) => {\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: Value,\n                children: [Value, \"\\uB9CC\\uC6D0\"]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Graph, \"IAycEhEGN4rdiJ6F99XhcyepmaE=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/Graph.js"],"names":["React","useState","ComposedChart","XAxis","YAxis","Tooltip","Legend","CartesianGrid","Area","Line","Box","Slider","InputLabel","MenuItem","FormControl","Select","Graph","P","Min","Max","Rev","year","Contribution","inflationRate","cov_Money","Money","scaledValue","Math","round","parseInt","cov_Units","units","unitIndex","length","covMoney","covUnits","Period","getPeriod","PMT","getPMT","round_two","float","formula_Simple","r","t","formula_Compound","formula_Contribute","formula_PV","FV","Cal_Compound","obj","Cal_Compound_Contribution","MIN_VALUE","MAX_VALUE","REV_VALUE","data","map","valueText","value","SLI_handleChange","event","newValue","SEL_handleChange","target","top","bottom","fontSize","right","예상수익","현재가치","display","justifyContent","width","Value","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,OAAtC,EAA+CC,MAA/C,EAAuDC,aAAvD,EAAsEC,IAAtE,EAA4EC,IAA5E,QAAwF,UAAxF;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,SAASC,KAAT,OAAqC;AAAA;;AAAA,MAAtB;AAAEC,IAAAA,CAAF;AAAKC,IAAAA,GAAL;AAAUC,IAAAA,GAAV;AAAeC,IAAAA;AAAf,GAAsB;AACjC,QAAMC,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,EAAf,EAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,CAAb;AACA,QAAMC,YAAY,GAAG,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkC,GAAlC,EAAuC,GAAvC,EAA4C,GAA5C,EAAiD,IAAjD,CAArB,CAFiC,CAE4C;;AAC7E,QAAMC,aAAa,GAAG,CAAtB,CAHiC,CAGR;;AACzB,WAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAEtB,QAAIC,WAAW,GAAGD,KAAlB;;AAEA,QAAGC,WAAW,GAAG,KAAjB,EAAwB;AACtBA,MAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWF,WAAW,GAAC,EAAvB,IAA2B,EAAzC;AACD;;AAED,WAAOA,WAAW,IAAI,KAAtB,EAA6B;AACzBA,MAAAA,WAAW,IAAI,KAAf;AACH;;AACD,WAAOG,QAAQ,CAACH,WAAD,CAAf;AACH;;AAED,WAASI,SAAT,CAAmBL,KAAnB,EAA0B;AACtB,UAAMM,KAAK,GAAG,CAAC,IAAD,EAAO,IAAP,CAAd;AACA,QAAIC,SAAS,GAAG,CAAhB;;AAEA,WAAOP,KAAK,IAAI,KAAT,IAAkBO,SAAS,GAAGD,KAAK,CAACE,MAAN,GAAe,CAApD,EAAuD;AACnDD,MAAAA,SAAS,IAAI,CAAb;AACAP,MAAAA,KAAK,IAAI,KAAT;AACH;;AACD,WAAOM,KAAK,CAACC,SAAD,CAAZ;AACH;;AAED,QAAME,QAAQ,GAAGV,SAAS,CAACP,CAAD,CAA1B;AACA,QAAMkB,QAAQ,GAAGL,SAAS,CAACb,CAAD,CAA1B;AACA,QAAM,CAACmB,MAAD,EAASC,SAAT,IAAsBpC,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACqC,GAAD,EAAMC,MAAN,IAAgBtC,QAAQ,CAAC,CAAD,CAA9B,CAhCiC,CAkCjC;;AACA,WAASuC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,WAAOd,IAAI,CAACC,KAAL,CAAWa,KAAK,GAAG,GAAnB,IAA0B,GAAjC;AACH,GArCgC,CAsCjC;;;AACA,WAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAC1B,WAAOV,QAAQ,GAAES,CAAC,GAAC,GAAF,GAAMT,QAAP,GAAkBU,CAAlC;AACH,GAzCgC,CA0CjC;;;AACA,WAASC,gBAAT,CAA0BF,CAA1B,EAA6BC,CAA7B,EAAgC;AAC5B,WAAOV,QAAQ,GAAE,CAACS,CAAC,GAAC,GAAF,GAAM,CAAP,KAAWC,CAA5B;AACH,GA7CgC,CA8CjC;;;AACA,WAASE,kBAAT,CAA4BH,CAA5B,EAA+BC,CAA/B,EAAkC;AAC9B,WAAON,GAAG,IAAK,CAAC,IAAIK,CAAC,GAAC,GAAP,KAAeC,CAAhB,GAAoB,CAAxB,CAAH,IAAiCD,CAAC,GAAC,GAAnC,CAAP;AACH,GAjDgC,CAkDjC;;;AACA,WAASI,UAAT,CAAoBC,EAApB,EAAwBJ,CAAxB,EAA2B;AACvB,WAAOI,EAAE,GAAI,CAAC,IAAEzB,aAAa,GAAC,GAAjB,KAAuBqB,CAApC;AACH,GArDgC,CAuDjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA,WAASK,YAAT,CAAsBL,CAAtB,EAAyB;AACrB,UAAMM,GAAG,GAAG;AACR,cAAQN,CAAC,GAAC,GADF;AAER,gBAAU,CAACjB,IAAI,CAACC,KAAL,CAAWM,QAAQ,GAAE,CAAChB,GAAG,GAAC,GAAJ,GAAQ,CAAT,KAAc0B,CAAxB,GAA8B,GAAzC,IAAgD,GAAjD,EAAsDjB,IAAI,CAACC,KAAL,CAAWM,QAAQ,GAAE,CAACf,GAAG,GAAC,GAAJ,GAAQ,CAAT,KAAcyB,CAAxB,GAA8B,GAAzC,IAAgD,GAAtG,CAFF;AAGR,cAAQjB,IAAI,CAACC,KAAL,CAAWM,QAAQ,GAAE,CAACd,GAAG,GAAC,GAAJ,GAAQ,CAAT,KAAcwB,CAAxB,GAA8B,GAAzC,IAAgD,GAHhD;AAIR,cAAQjB,IAAI,CAACC,KAAL,CAAWM,QAAQ,GAAE,CAACd,GAAG,GAAC,GAAJ,GAAQ,CAAT,KAAcwB,CAAxB,GAA+B,CAAC,IAAErB,aAAa,GAAC,GAAjB,KAAuBqB,CAAtD,GAA2D,GAAtE,IAA6E;AAJ7E,KAAZ;AAMA,WAAOM,GAAP;AACH,GA/EgC,CAiFjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASC,yBAAT,CAAmCP,CAAnC,EAAsC;AAClC,UAAMQ,SAAS,GAAGP,gBAAgB,CAAC3B,GAAD,EAAM0B,CAAN,CAAhB,GAA2BE,kBAAkB,CAAC5B,GAAD,EAAM0B,CAAN,CAA/D;AACA,UAAMS,SAAS,GAAGR,gBAAgB,CAAC1B,GAAD,EAAMyB,CAAN,CAAhB,GAA2BE,kBAAkB,CAAC3B,GAAD,EAAMyB,CAAN,CAA/D;AACA,UAAMU,SAAS,GAAGT,gBAAgB,CAACzB,GAAD,EAAMwB,CAAN,CAAhB,GAA2BE,kBAAkB,CAAC1B,GAAD,EAAMwB,CAAN,CAA/D;AACA,UAAMM,GAAG,GAAG;AACR,cAAQN,CAAC,GAAC,GADF;AAER,gBAAU,CAACJ,SAAS,CAACY,SAAD,CAAV,EAAuBZ,SAAS,CAACa,SAAD,CAAhC,CAFF;AAGR,cAAQb,SAAS,CAACc,SAAD,CAHT;AAIR,cAAQd,SAAS,CAACO,UAAU,CAACO,SAAD,EAAYV,CAAZ,CAAX;AAJT,KAAZ;AAMA,WAAOM,GAAP;AACH,GA7GgC,CA+GjC;;;AACA,QAAMK,IAAI,GAAGlC,IAAI,CAACmC,GAAL,CAAS,UAASZ,CAAT,EAAW;AAC7B,WAAOO,yBAAyB,CAACP,CAAD,CAAhC;AACH,GAFY,CAAb,CAhHiC,CAoHjC;;AACA,WAASa,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,WAAQ,GAAEA,KAAM,KAAhB;AACH,GAvHgC,CAyHjC;;;AACA,QAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC1C,QAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChCxB,MAAAA,SAAS,CAACwB,QAAD,CAAT;AACD;AACJ,GAJD,CA1HiC,CAgIjC;;;AACA,QAAMC,gBAAgB,GAAIF,KAAD,IAAW;AAChCrB,IAAAA,MAAM,CAACqB,KAAK,CAACG,MAAN,CAAaL,KAAd,CAAN;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI,QAAC,aAAD;AAAe,MAAA,KAAK,EAAE,GAAtB;AAA2B,MAAA,MAAM,EAAE,GAAnC;AAAwC,MAAA,MAAM,EAAE;AAACM,QAAAA,GAAG,EAAE,EAAN;AAAUC,QAAAA,MAAM,EAAE;AAAlB,OAAhD;AAAuE,MAAA,IAAI,EAAEV,IAA7E;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAC,MAAf;AAAsB,QAAA,IAAI,EAAE;AAACW,UAAAA,QAAQ,EAAE;AAAX,SAA5B;AAA4C,QAAA,OAAO,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR;AAArD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEhC,QAAb;AAAuB,QAAA,IAAI,EAAE;AAAC+B,UAAAA,QAAQ,EAAE;AAAX,SAA7B;AAA6C,QAAA,OAAO,EAAE;AAACD,UAAAA,MAAM,EAAE;AAAT;AAAtD;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAE;AAACC,UAAAA,QAAQ,EAAE;AAAX;AAAd;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI,QAAC,aAAD;AAAe,QAAA,MAAM,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI,QAAC,IAAD;AAAM,QAAA,IAAI,EAAE/B,QAAZ;AAAsB,QAAA,IAAI,EAAC,UAA3B;AAAsC,QAAA,OAAO,EAAC,sCAA9C;AAAuD,QAAA,IAAI,EAAC,SAA5D;AAAsE,QAAA,MAAM,EAAC;AAA7E;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,QAAZ;AAAsB,QAAA,IAAI,EAAC,UAA3B;AAAsC,QAAA,OAAO,EAAC,0BAA9C;AAAqD,QAAA,MAAM,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA,cAPJ,eAQI,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,QAAZ;AAAsB,QAAA,IAAI,EAAC,UAA3B;AAAsC,QAAA,OAAO,EAAC,0BAA9C;AAAqD,QAAA,MAAM,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAYI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,KAAd;AAAA,gCACI;AAAM,UAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAM,UAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAI,QAAA,SAAS,EAAC,KAAd;AAAA,gCACI;AAAM,UAAA,SAAS,EAAC,aAAhB;AAAA,qBAA+BoB,IAAI,CAACnB,MAAM,GAAC,CAAR,CAAJ,CAAegC,IAA9C,EAAoDjC,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAM,UAAA,SAAS,EAAC,aAAhB;AAAA,qBAA+BoB,IAAI,CAACnB,MAAM,GAAC,CAAR,CAAJ,CAAeiC,IAA9C,EAAoDlC,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eASI;AAAA,kBAAMsB,SAAS,CAACrB,MAAD;AAAf;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,eAuBI;AAAK,MAAA,KAAK,EAAE;AAACkC,QAAAA,OAAO,EAAE,MAAV;AAAkBC,QAAAA,cAAc,EAAE;AAAlC,OAAZ;AAAA,8BACI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAAEC,UAAAA,KAAK,EAAE,GAAT;AAAcF,UAAAA,OAAO,EAAC;AAAtB,SAAT;AAAA,+BACI,QAAC,MAAD;AACI,UAAA,KAAK,EAAElC,MADX;AAEI,wBAAW,MAFf;AAGI,UAAA,gBAAgB,EAAEqB,SAHtB;AAII,UAAA,gBAAgB,EAAEA,SAJtB;AAKI,UAAA,iBAAiB,EAAC,MALtB;AAMI,UAAA,QAAQ,EAAEE,gBANd;AAOI,UAAA,IAAI,EAAE,CAPV;AAQI,UAAA,GAAG,EAAE,CART;AASI,UAAA,GAAG,EAAE,EATT;AAUI,UAAA,IAAI,EAAC;AAVT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAeI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAAEa,UAAAA,KAAK,EAAE,GAAT;AAAcF,UAAAA,OAAO,EAAC;AAAtB,SAAT;AAAA,+BACI,QAAC,WAAD;AAAa,UAAA,SAAS,MAAtB;AAAA,kCACI,QAAC,UAAD;AAAY,YAAA,EAAE,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,MAAD;AACI,YAAA,OAAO,EAAC,2BADZ;AAEI,YAAA,EAAE,EAAC,qBAFP;AAGI,YAAA,KAAK,EAAEhC,GAHX;AAII,YAAA,KAAK,EAAC,cAJV;AAKI,YAAA,QAAQ,EAAEwB,gBALd;AAMI,YAAA,YAAY,EAAE,CANlB;AAAA,sBAQKxC,YAAY,CAACkC,GAAb,CAAiB,CAACiB,KAAD,EAAQC,KAAR,KAAkB;AAChC,kCAAO,QAAC,QAAD;AAAsB,gBAAA,KAAK,EAAED,KAA7B;AAAA,2BAAqCA,KAArC;AAAA,iBAAeC,KAAf;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH,aAFA;AARL;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2DH;;GAhMQ1D,K;;KAAAA,K;AAkMT,eAAeA,KAAf","sourcesContent":["import React, { useState } from 'react';\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Area, Line } from 'recharts';\nimport Box from '@mui/material/Box';\nimport Slider from '@mui/material/Slider';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\nfunction Graph({ P, Min, Max, Rev }) {\n    const year = [0, 5, 10, 15, 20, 25, 30, 35, 40];\n    const Contribution = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]; //적립금액\n    const inflationRate = 2; //물가 상승률\n    function cov_Money(Money) {\n      \n        let scaledValue = Money;\n          \n        if(scaledValue < 10000) {\n          scaledValue = Math.round(scaledValue/10)*10;\n        }\n\n        while (scaledValue >= 10000) {\n            scaledValue /= 10000;\n        }\n        return parseInt(scaledValue);\n    }\n\n    function cov_Units(Money) {\n        const units = ['만원', '억원'];\n        let unitIndex = 0;\n\n        while (Money >= 10000 && unitIndex < units.length - 1) {\n            unitIndex += 1;\n            Money /= 10000;\n        }\n        return units[unitIndex];\n    }\n\n    const covMoney = cov_Money(P);\n    const covUnits = cov_Units(P);\n    const [Period, getPeriod] = useState(15);\n    const [PMT, getPMT] = useState(0);\n\n    //소수점 둘째 자리 반올림\n    function round_two(float) {\n        return Math.round(float * 1e2) / 1e2;\n    }\n    //단리 공식\n    function formula_Simple(r, t) {\n        return covMoney+(r/100*covMoney)*(t);\n    }\n    //복리 공식\n    function formula_Compound(r, t) {\n        return covMoney*((r/100+1)**t);\n    }\n    //적립식 복리 공식\n    function formula_Contribute(r, t) {\n        return PMT * (((1 + r/100) ** t) -1) / (r/100);\n    }\n    //현재가치 공식\n    function formula_PV(FV, t) {\n        return FV / ((1+inflationRate/100)**t);\n    }\n\n    //단리 계산\n    // function Cal_Simple(t) {\n    //     const obj = {\n    //         \"year\": t+'년',\n    //         \"예상수익범위\": [Math.round((covMoney+(Min/100*covMoney)*(t)) * 1e2) / 1e2, \n    //         Math.round((covMoney+(Max/100*covMoney)*(t)) * 1e2) / 1e2],\n    //         \"예상수익\": Math.round((covMoney+(Rev/100*covMoney)*(t)) * 1e2) / 1e2, \n    //         \"현재가치\": (Math.round((covMoney+(Rev/100*covMoney)*(t)) * 1e2) / 1e2) / ((1+inflationRate/100)**t)\n    //     };\n    //     return obj;\n    // }\n\n    //복리 계산\n    //*년복리\n    //P는 원금, r은 이자율, t는 기간\n    //Compound Formula: P * ((r% + 1)** t) \n    function Cal_Compound(t) {\n        const obj = {\n            \"year\": t+'년',\n            \"예상수익범위\": [Math.round(covMoney*((Min/100+1)**(t)) * 1e2) / 1e2, Math.round(covMoney*((Max/100+1)**(t)) * 1e2) / 1e2],\n            \"예상수익\": Math.round(covMoney*((Rev/100+1)**(t)) * 1e2) / 1e2, \n            \"현재가치\": Math.round(covMoney*((Rev/100+1)**(t)) / ((1+inflationRate/100)**t) * 1e2) / 1e2\n        };\n        return obj;\n    }\n\n    //적립식 복리 계산\n    //*년복리\n    //P는 원금, r은 이자율, t는 기간, PMT는 적립금액 //PMT * (((1 + r/100) ** t) -1) / (r/100)\n    //Compound Formula: P * ((r% + 1)** t) \n    //Contribution Compound Formula(End of Period): PMT * (((1 + r%) ** t) -1) / r%\n    //Contribution Compound Formula(Start of Period): PMT * ((((1 + r%) ** t) -1) / r%) * (1 + r%)\n    //Compound + Contribution Compound\n    // function Cal_Compound_Contribution(t) {\n    //     const obj = {\n    //         \"year\": t+'년',\n    //         \"예상수익범위\": [Math.round((covMoney*((Min/100+1)**(t)) + PMT * (((1 + Min/100) ** t) -1) / (Min/100)) * 1e2) / 1e2, \n    //         Math.round((covMoney*((Max/100+1)**(t)) + PMT * (((1 + Max/100) ** t) -1) / (Max/100)) * 1e2) / 1e2],\n    //         \"예상수익\": Math.round((covMoney*((Rev/100+1)**(t)) + PMT * (((1 + Rev/100) ** t) -1) / (Rev/100)) * 1e2) / 1e2, \n    //         \"현재가치\": Math.round((covMoney*((Rev/100+1)**(t)) + PMT * (((1 + Rev/100) ** t) -1) / (Rev/100)) / ((1+inflationRate/100)**t) * 1e2) / 1e2\n    //     };\n    //     return obj;\n    // }\n    function Cal_Compound_Contribution(t) {\n        const MIN_VALUE = formula_Compound(Min, t) + formula_Contribute(Min, t);\n        const MAX_VALUE = formula_Compound(Max, t) + formula_Contribute(Max, t);\n        const REV_VALUE = formula_Compound(Rev, t) + formula_Contribute(Rev, t);\n        const obj = {\n            \"year\": t+'년',\n            \"예상수익범위\": [round_two(MIN_VALUE), round_two(MAX_VALUE)],\n            \"예상수익\": round_two(REV_VALUE), \n            \"현재가치\": round_two(formula_PV(REV_VALUE, t))\n        };\n        return obj;\n    }\n\n    //데이터 세팅\n    const data = year.map(function(t){\n        return Cal_Compound_Contribution(t);\n    });\n\n    //기간 세팅\n    function valueText(value) {\n        return `${value}년 뒤`\n    }\n\n    //Slider handleChange\n    const SLI_handleChange = (event, newValue) => {\n        if (typeof newValue === 'number') {\n          getPeriod(newValue);\n        }\n    };\n\n    //Select Box handleChange\n    const SEL_handleChange = (event) => {\n        getPMT(event.target.value);\n    };\n\n    return (\n        <div>\n            <ComposedChart width={400} height={250} margin={{top: 20, bottom: 20}} data={data}>\n                <XAxis dataKey=\"year\" tick={{fontSize: 10}} padding={{right: 20}}/>\n                <YAxis unit={covUnits} tick={{fontSize: 10}} padding={{bottom: 10}} />\n                <Tooltip />\n                <Legend tick={{fontSize: 10}} />\n                <CartesianGrid stroke=\"#f4f4f4\" />\n                <Area unit={covUnits} type=\"monotone\" dataKey=\"예상수익범위\" fill=\"#FFB950\" stroke=\"#FFB950\"/>\n                <Line unit={covUnits} type=\"monotone\" dataKey=\"예상수익\" stroke=\"#1D1A82\" />\n                <Line unit={covUnits} type=\"monotone\" dataKey=\"현재가치\" stroke=\"#B45CCA\" />\n            </ComposedChart>\n\n            <div className='tableStyle'>\n                <ul className='Row'>\n                    <span className='ColumnValue'>예상 수익</span>\n                    <span className='ColumnValue'>현재 가치</span>\n                </ul>\n                <ul className='Row'>\n                    <span className='ColumnValue'>{data[Period/5].예상수익}{covUnits}</span>\n                    <span className='ColumnValue'>{data[Period/5].현재가치}{covUnits}</span>\n                </ul>\n                <div>{valueText(Period)}</div>\n            </div>\n            <div style={{display: 'flex', justifyContent: 'center' }}>\n                <Box sx={{ width: 300, display:'inline-block' }}>\n                    <Slider\n                        value={Period}\n                        aria-label='Year'\n                        getAriaValueText={valueText}\n                        valueLabelFormat={valueText}\n                        valueLabelDisplay='auto'\n                        onChange={SLI_handleChange}\n                        step={5}\n                        min={0}\n                        max={40}\n                        size=\"small\"\n                    />\n                </Box>\n                <Box sx={{ width: 300, display:'inline-block' }}>\n                    <FormControl fullWidth>\n                        <InputLabel id=\"contribution-select-label\">납입</InputLabel>\n                        <Select\n                            labelId=\"contribution-select-label\"\n                            id=\"contribution-select\"\n                            value={PMT}\n                            label=\"만원\"\n                            onChange={SEL_handleChange}\n                            defaultValue={0}\n                        >\n                            {Contribution.map((Value, index) => {\n                                return <MenuItem key={index} value={Value}>{Value}만원</MenuItem>\n                            })}\n                        </Select>\n                    </FormControl>\n                </Box>                \n            </div>\n        </div>\n    );\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}