{"ast":null,"code":"var _jsxFileName = \"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/SliderSel.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Slider from \"@mui/material/Slider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SliderSel(_ref) {\n  _s();\n\n  let {\n    QnA,\n    getResponse\n  } = _ref;\n  const [Resp, getResp] = useState(10);\n  QnA.status = true;\n\n  function valueLabelFormat(Resp) {\n    const units = [\"만원\", \"억원\"];\n    let unitIndex = 0;\n    let scaledValue = Resp;\n\n    if (scaledValue < 10000) {\n      scaledValue = Math.round(scaledValue / 10) * 10;\n    }\n\n    while (scaledValue >= 10000 && unitIndex < units.length - 1) {\n      unitIndex += 1;\n      scaledValue /= 10000;\n    }\n\n    return `${parseInt(scaledValue)} ${units[unitIndex]}`;\n  }\n\n  function calculateValue(Resp) {\n    return 10 * Math.pow(10, Resp / 25);\n  }\n\n  const handleChange = (event, newValue) => {\n    if (typeof newValue === \"number\") {\n      getResp(newValue);\n    }\n  };\n\n  getResponse(Math.round(calculateValue(Resp) / 10) * 10);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"page\",\n        children: QnA.questionID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"question\",\n        children: [\" \", QnA.Question]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: 300,\n          display: \"inline-block\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          id: \"non-linear-slider\",\n          gutterBottom: true,\n          children: [\"\\uD22C\\uC790 \\uAE08\\uC561: \", valueLabelFormat(calculateValue(Resp))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          value: Resp,\n          min: 0,\n          step: 0.02,\n          max: 100,\n          scale: calculateValue,\n          getAriaValueText: valueLabelFormat,\n          valueLabelFormat: valueLabelFormat,\n          onChange: handleChange,\n          \"aria-labelledby\": \"non-linear-slider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SliderSel, \"qYTxbhLoIgCF+CL9tYR15aBoXOQ=\");\n\n_c = SliderSel;\nexport default SliderSel;\n\nvar _c;\n\n$RefreshReg$(_c, \"SliderSel\");","map":{"version":3,"sources":["/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/SliderSel.js"],"names":["React","useState","Box","Typography","Slider","SliderSel","QnA","getResponse","Resp","getResp","status","valueLabelFormat","units","unitIndex","scaledValue","Math","round","length","parseInt","calculateValue","pow","handleChange","event","newValue","questionID","Question","width","display"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Slider from \"@mui/material/Slider\";\n\nfunction SliderSel({ QnA, getResponse }) {\n  const [Resp, getResp] = useState(10);\n  QnA.status = true;\n\n  function valueLabelFormat(Resp) {\n    const units = [\"만원\", \"억원\"];\n\n    let unitIndex = 0;\n    let scaledValue = Resp;\n\n    if (scaledValue < 10000) {\n      scaledValue = Math.round(scaledValue / 10) * 10;\n    }\n\n    while (scaledValue >= 10000 && unitIndex < units.length - 1) {\n      unitIndex += 1;\n      scaledValue /= 10000;\n    }\n    return `${parseInt(scaledValue)} ${units[unitIndex]}`;\n  }\n\n  function calculateValue(Resp) {\n    return 10 * Math.pow(10, Resp / 25);\n  }\n\n  const handleChange = (event, newValue) => {\n    if (typeof newValue === \"number\") {\n      getResp(newValue);\n    }\n  };\n\n  getResponse(Math.round(calculateValue(Resp) / 10) * 10);\n\n  return (\n    <div>\n      <div className=\"Content\">\n        <h3 className=\"page\">{QnA.questionID}</h3>\n        <h1 className=\"question\"> {QnA.Question}</h1>\n        <Box sx={{ width: 300, display: \"inline-block\" }}>\n          <Typography id=\"non-linear-slider\" gutterBottom>\n            투자 금액: {valueLabelFormat(calculateValue(Resp))}\n          </Typography>\n          <Slider\n            value={Resp}\n            min={0}\n            step={0.02}\n            max={100}\n            scale={calculateValue}\n            getAriaValueText={valueLabelFormat}\n            valueLabelFormat={valueLabelFormat}\n            onChange={handleChange}\n            aria-labelledby=\"non-linear-slider\"\n          />\n        </Box>\n      </div>\n    </div>\n  );\n}\n\nexport default SliderSel;\n"]},"metadata":{},"sourceType":"module"}