[{"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/index.js":"1","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/App.js":"2","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/reportWebVitals.js":"3","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q3.js":"4","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q4.js":"5","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q5.js":"6","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q1.js":"7","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q2.js":"8","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q6.js":"9","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Start.js":"10","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/NextButton.js":"11","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/First_Result.js":"12","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/Header.js":"13","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q7.js":"14","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q8.js":"15","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q9.js":"16","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q10.js":"17","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q15.js":"18","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q11.js":"19","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q13.js":"20","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q14.js":"21","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q12.js":"22","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q16.js":"23","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Final_Result.js":"24","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q17.js":"25","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/ScrollToTop.js":"26","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/test.js":"27","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Test.js":"28","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/CircularBar.js":"29","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/SingleSel.js":"30","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/MultiSel.js":"31","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/SliderSel.js":"32","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/content/QNA.js":"33","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/content/FIRST_TYPE.js":"34","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/content/FINAL_TYPE.js":"35","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/content/CLASSIFY.js":"36","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/content/RESULT.js":"37","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/profitGraph.js":"38","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/ProfitGraph.js":"39","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/Pension.js":"40","/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/GBIGraph.js":"41"},{"size":625,"mtime":1650256481746,"results":"42","hashOfConfig":"43"},{"size":2470,"mtime":1653608373251,"results":"44","hashOfConfig":"43"},{"size":362,"mtime":1648428828015,"results":"45","hashOfConfig":"43"},{"size":1142,"mtime":1653374399623,"results":"46","hashOfConfig":"43"},{"size":1142,"mtime":1653374403434,"results":"47","hashOfConfig":"43"},{"size":1142,"mtime":1653374412177,"results":"48","hashOfConfig":"43"},{"size":1186,"mtime":1653608394609,"results":"49","hashOfConfig":"43"},{"size":1142,"mtime":1653374396219,"results":"50","hashOfConfig":"43"},{"size":1211,"mtime":1653374416362,"results":"51","hashOfConfig":"43"},{"size":1705,"mtime":1653636834687,"results":"52","hashOfConfig":"43"},{"size":542,"mtime":1652677782106,"results":"53","hashOfConfig":"43"},{"size":6575,"mtime":1653439785090,"results":"54","hashOfConfig":"43"},{"size":574,"mtime":1651464972431,"results":"55","hashOfConfig":"43"},{"size":1142,"mtime":1653374421043,"results":"56","hashOfConfig":"43"},{"size":1142,"mtime":1653374426024,"results":"57","hashOfConfig":"43"},{"size":1143,"mtime":1653374430419,"results":"58","hashOfConfig":"43"},{"size":1146,"mtime":1653374434439,"results":"59","hashOfConfig":"43"},{"size":1146,"mtime":1653374460837,"results":"60","hashOfConfig":"43"},{"size":1146,"mtime":1653374440946,"results":"61","hashOfConfig":"43"},{"size":1146,"mtime":1653374453352,"results":"62","hashOfConfig":"43"},{"size":1146,"mtime":1653374457687,"results":"63","hashOfConfig":"43"},{"size":1146,"mtime":1653374444455,"results":"64","hashOfConfig":"43"},{"size":1149,"mtime":1653636503007,"results":"65","hashOfConfig":"43"},{"size":11726,"mtime":1653885733632,"results":"66","hashOfConfig":"43"},{"size":1149,"mtime":1653374468702,"results":"67","hashOfConfig":"43"},{"size":352,"mtime":1651464819937,"results":"68","hashOfConfig":"43"},{"size":600,"mtime":1650846426544,"results":"69","hashOfConfig":"43"},{"size":6165,"mtime":1653439794400,"results":"70","hashOfConfig":"43"},{"size":998,"mtime":1651797380487,"results":"71","hashOfConfig":"43"},{"size":1459,"mtime":1653374340353,"results":"72","hashOfConfig":"43"},{"size":1126,"mtime":1653374367903,"results":"73","hashOfConfig":"43"},{"size":1726,"mtime":1653374353468,"results":"74","hashOfConfig":"43"},{"size":15718,"mtime":1653636490360,"results":"75","hashOfConfig":"43"},{"size":1571,"mtime":1652838508023,"results":"76","hashOfConfig":"43"},{"size":5933,"mtime":1653524508609,"results":"77","hashOfConfig":"43"},{"size":412,"mtime":1652859196127,"results":"78","hashOfConfig":"43"},{"size":4119,"mtime":1653373803735,"results":"79","hashOfConfig":"43"},{"size":7700,"mtime":1653525209233,"results":"80","hashOfConfig":"43"},{"size":7929,"mtime":1653891498079,"results":"81","hashOfConfig":"43"},{"size":551,"mtime":1653637087147,"results":"82","hashOfConfig":"43"},{"size":5700,"mtime":1653896456729,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},"n7oa0t",{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"200"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"205"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/index.js",[],[],["212","213"],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/App.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/reportWebVitals.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q3.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q4.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q5.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q1.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q2.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q6.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Start.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/NextButton.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/First_Result.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/Header.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q7.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q8.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q9.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q10.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q15.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q11.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q13.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q14.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q12.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q16.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Final_Result.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Q17.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/ScrollToTop.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/test.js",["214"],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/pages/Test.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/CircularBar.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/SingleSel.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/MultiSel.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/SliderSel.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/content/QNA.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/content/FIRST_TYPE.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/content/FINAL_TYPE.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/content/CLASSIFY.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/content/RESULT.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/profitGraph.js",["215","216","217","218"],[],"import React, { useState } from \"react\";\nimport {\n    ComposedChart,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    CartesianGrid,\n    Area,\n    Line,\n} from \"recharts\";\nimport Box from \"@mui/material/Box\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select from \"@mui/material/Select\";\n\nfunction profitGraph({ P, Min, Max, Rev }) {\n    //단리, 복리 => 년 단위로 계산\n    //적립식 복리 : Compound + Contribute\n    const Year = [0, 5, 10, 15, 20, 25, 30, 35, 40];\n    const Contribution = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]; //적립금액\n    const inflationRate = 2; //물가 상승률\n    function cov_Money(Money) {\n        let scaledValue = Money;\n\n        if (scaledValue < 10000) {\n            scaledValue = Math.round(scaledValue / 10) * 10;\n        }\n\n        while (scaledValue >= 10000) {\n            scaledValue /= 10000;\n        }\n        return parseInt(scaledValue);\n    }\n\n    function cov_Units(Money) {\n        const units = [\"만원\", \"억원\"];\n        let unitIndex = 0;\n\n        while (Money >= 10000 && unitIndex < units.length - 1) {\n            unitIndex += 1;\n            Money /= 10000;\n        }\n        return units[unitIndex];\n    }\n\n    const covMoney = cov_Money(P);\n    const covUnits = cov_Units(P);\n    const [Period, getPeriod] = useState(15);\n    const [PMT, getPMT] = useState(0);\n\n    //소수점 둘째 자리 반올림\n    function round_two(float) {\n        return Math.round(float * 1e2) / 1e2;\n    }\n    //단리 공식\n    function formula_Simple(r, t) {\n        return covMoney + (r / 100) * covMoney * t;\n    }\n    //복리 공식\n    function formula_Compound(r, t) {\n        return covMoney * (r / 100 + 1) ** t;\n    }\n    //적립식 복리 공식\n    function formula_Contribute(r, t) {\n        const pmt = covUnits === \"억원\" ? PMT / 10000 : PMT;\n        if(r !== 0){\n            return (pmt * ((1 + r / 100) ** t - 1)) / (r / 100);\n        }\n        else { //이자율이 0인 경우, 계산식 분모에 0이 들어가면서 값이 무한대로 수렴 -> 예외처리\n            return pmt * t;\n        }\n    }\n    //현재가치 공식\n    function formula_PV(FV, t) {\n        return FV / (1 + inflationRate / 100) ** t;\n    }\n\n    //단리 계산기\n    function Cal_Simple(t) {\n        const MIN_VALUE = formula_Simple(Min, t);\n        const MAX_VALUE = formula_Simple(Max, t);\n        const REV_VALUE = formula_Simple(Rev, t);\n        const obj = {\n            year: t + \"년\",\n            예상수익범위: [round_two(MIN_VALUE), round_two(MAX_VALUE)],\n            예상수익: round_two(REV_VALUE),\n            현재가치: round_two(formula_PV(REV_VALUE, t)),\n        };\n        return obj;\n    }\n\n    //복리 계산기\n    //*년복리\n    function Cal_Compound(t) {\n        const MIN_VALUE = formula_Compound(Min, t);\n        const MAX_VALUE = formula_Compound(Max, t);\n        const REV_VALUE = formula_Compound(Rev, t);\n        const obj = {\n            year: t + \"년\",\n            예상수익범위: [round_two(MIN_VALUE), round_two(MAX_VALUE)],\n            예상수익: round_two(REV_VALUE),\n            현재가치: round_two(formula_PV(REV_VALUE, t)),\n        };\n        return obj;\n    }\n\n    //적립식 복리 계산기\n    //*년복리\n    function Cal_Compound_Contribution(t) {\n        const MIN_VALUE = formula_Compound(Min, t) + formula_Contribute(Min, t);\n        const MAX_VALUE = formula_Compound(Max, t) + formula_Contribute(Max, t);\n        const REV_VALUE = formula_Compound(Rev, t) + formula_Contribute(Rev, t);\n        const obj = {\n            year: t + \"년\",\n            예상수익범위: [round_two(MIN_VALUE), round_two(MAX_VALUE)],\n            예상수익: round_two(REV_VALUE),\n            현재가치: round_two(formula_PV(REV_VALUE, t)),\n        };\n        return obj;\n    }\n\n    //데이터 세팅\n    const data = Year.map(function (t) {\n        return Cal_Compound_Contribution(t);\n    });\n\n    console.log(data);\n\n    //Contribution handleChange\n    const CON_handleChange = (event) => {\n        getPMT(event.target.value);\n    };\n\n    //Period handleChange\n    const PER_handleChange = (event) => {\n        getPeriod(event.target.value);\n    };\n\n    return (\n      <div>\n        <div style={{ marginTop: \"1rem\" }}>\n          <h3 style={{ margin: \"0.3rem 0\" }}>📈 예상 수익률 그래프</h3>\n          <ComposedChart\n            width={400}\n            height={250}\n            margin={{ top: 20, bottom: 20 }}\n            data={data}\n          >\n            <XAxis\n              dataKey=\"year\"\n              tick={{ fontSize: 10 }}\n              padding={{ right: 20 }}\n            />\n            <YAxis\n              unit={covUnits}\n              tick={{ fontSize: 10 }}\n              padding={{ bottom: 10 }}\n            />\n            <Tooltip />\n            <Legend tick={{ fontSize: 10 }} />\n            <CartesianGrid stroke=\"#f4f4f4\" />\n            <Area\n              unit={covUnits}\n              type=\"monotone\"\n              dataKey=\"예상수익범위\"\n              fill=\"#FFB950\"\n              stroke=\"#FFB950\"\n            />\n            <Line\n              unit={covUnits}\n              type=\"monotone\"\n              dataKey=\"예상수익\"\n              stroke=\"#1D1A82\"\n            />\n            <Line\n              unit={covUnits}\n              type=\"monotone\"\n              dataKey=\"현재가치\"\n              stroke=\"#B45CCA\"\n            />\n          </ComposedChart>\n          <div className=\"Discription\">\n            <span style={{ marginRight: \"0.3rem\" }}>매년 </span>\n            <Box sx={{ display: \"flex\" }}>\n              <FormControl variant=\"standard\" size=\"small\">\n                <Select\n                  labelId=\"contribution-select-label\"\n                  id=\"contribution-select\"\n                  value={PMT}\n                  label=\"만원\"\n                  onChange={CON_handleChange}\n                  defaultValue={0}\n                >\n                  {Contribution.map((Value, index) => {\n                    return (\n                      <MenuItem key={index} value={Value}>\n                        {Value}만원\n                      </MenuItem>\n                    );\n                  })}\n                </Select>\n              </FormControl>\n            </Box>\n            <span style={{ marginLeft: \"0.3rem\", marginRight: \"0.3rem\" }}>\n              {\" \"}\n              을 적립했을 때{\" \"}\n            </span>\n            <Box sx={{ display: \"flex\" }}>\n              <FormControl variant=\"standard\">\n                <Select\n                  labelId=\"year-select-label\"\n                  id=\"year-select\"\n                  value={Period}\n                  label=\"년\"\n                  onChange={PER_handleChange}\n                  defaultValue={0}\n                >\n                  {Year.map((Value, index) => {\n                    return (\n                      <MenuItem key={index} value={Value}>\n                        {Value}년\n                      </MenuItem>\n                    );\n                  })}\n                </Select>\n              </FormControl>\n            </Box>\n            <span> 뒤의 </span>\n            <span>\n              예상 수익은{\" \"}\n              <b>\n                {data[Period / 5].예상수익}\n                {covUnits}\n              </b>\n              입니다.\n              <br />\n              (현재 가치로 환산시{\" \"}\n              <b>\n                {data[Period / 5].현재가치}\n                {covUnits}\n              </b>\n              )\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n}\n\nexport default profitGraph;\n",["219","220"],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/ProfitGraph.js",["221","222"],[],"import React, { useState } from \"react\";\nimport {\n  ComposedChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  CartesianGrid,\n  Area,\n  Line,\n} from \"recharts\";\n// import Box from \"@mui/material/Box\";\n// import MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\n// import Select from \"@mui/material/Select\";\nimport { Box, InputAdornment, Input, MenuItem, Select } from \"@mui/material\";\n\nfunction ProfitGraph({ Min, Max, Pro }) {\n  //단리, 복리 => 년 단위로 계산\n  //적립식 복리 : Compound + Contribute\n  const Year = [0, 5, 10, 15, 20, 25, 30, 35, 40];\n  const Contribution = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]; //적립금액\n  const inflationRate = 2; //물가 상승률\n  // function cov_Money(Money) {\n  //   let scaledValue = Money;\n\n  //   if (scaledValue < 10000) {\n  //     scaledValue = Math.round(scaledValue / 10) * 10;\n  //   }\n\n  //   while (scaledValue >= 10000) {\n  //     scaledValue /= 10000;\n  //   }\n  //   return parseInt(scaledValue);\n  // }\n\n  // function cov_Units(Money) {\n  //   const units = [\"만원\", \"억원\"];\n  //   let unitIndex = 0;\n\n  //   while (Money >= 10000 && unitIndex < units.length - 1) {\n  //     unitIndex += 1;\n  //     Money /= 10000;\n  //   }\n  //   return units[unitIndex];\n  // }\n\n  const [Period, getPeriod] = useState(15);\n  const [P, setP] = useState(150);\n  const [PMT, getPMT] = useState(0);\n\n  //소수점 둘째 자리 반올림\n  function round_two(float) {\n    return Math.round(float * 1e2) / 1e2;\n  }\n  //단리 공식\n  function formula_Simple(P, r, t) {\n    return P + (r / 100) * P * t;\n  }\n  //복리 공식\n  function formula_Compound(P, r, t) {\n    return P * (r / 100 + 1) ** t;\n  }\n  //적립식 복리 공식\n  function formula_Contribute(pmt, r, t) {\n    // const pmt = covUnits === \"억원\" ? PMT / 10000 : PMT;\n    if (r !== 0) {\n      return (pmt * ((1 + r / 100) ** t - 1)) / (r / 100);\n    } else {\n      //이자율이 0인 경우, 계산식 분모에 0이 들어가면서 값이 무한대로 수렴 -> 예외처리\n      return pmt * t;\n    }\n  }\n  //현재가치 공식\n  function formula_PV(FV, t) {\n    return FV / (1 + inflationRate / 100) ** t;\n  }\n\n  //단리 계산기\n  function Cal_Simple(t) {\n    const MIN_VALUE = formula_Simple(P, Min, t);\n    const MAX_VALUE = formula_Simple(P, Max, t);\n    const PRO_VALUE = formula_Simple(P, Pro, t);\n    const obj = {\n      year: t + \"년\",\n      예상수익범위: [round_two(MIN_VALUE), round_two(MAX_VALUE)],\n      예상수익: round_two(PRO_VALUE),\n      현재가치: round_two(formula_PV(PRO_VALUE, t)),\n    };\n    return obj;\n  }\n\n  //복리 계산기\n  //*년복리\n  function Cal_Compound(t) {\n    const MIN_VALUE = formula_Compound(P, Min, t);\n    const MAX_VALUE = formula_Compound(P, Max, t);\n    const PRO_VALUE = formula_Compound(P, Pro, t);\n    const obj = {\n      year: t + \"년\",\n      예상수익범위: [round_two(MIN_VALUE), round_two(MAX_VALUE)],\n      예상수익: round_two(PRO_VALUE),\n      현재가치: round_two(formula_PV(PRO_VALUE, t)),\n    };\n    return obj;\n  }\n\n  //적립식 복리 계산기\n  //*년복리\n  function Cal_Compound_Contribution(t) {\n    const MIN_VALUE = formula_Compound(P, Min, t) + formula_Contribute(PMT, Min, t);\n    const MAX_VALUE = formula_Compound(P, Max, t) + formula_Contribute(PMT, Max, t);\n    const PRO_VALUE = formula_Compound(P, Pro, t) + formula_Contribute(PMT, Pro, t);\n    const obj = {\n      year: t + \"년\",\n      예상수익범위: [round_two(MIN_VALUE), round_two(MAX_VALUE)],\n      예상수익: round_two(PRO_VALUE),\n      현재가치: round_two(formula_PV(PRO_VALUE, t)),\n    };\n    return obj;\n  }\n\n  //데이터 세팅\n  const data = Year.map(function (t) {\n    return Cal_Compound_Contribution(t);\n  });\n\n  // console.log(data);\n\n  //Contribution handleChange\n  const CON_handleChange = (event) => {\n    getPMT(event.target.value);\n  };\n\n  //Period handleChange\n  const PER_handleChange = (event) => {\n    getPeriod(event.target.value);\n  };\n\n  const P_handlChange = (event) => {\n    setP(event.target.value);\n    // covMoney = cov_Money(P);\n    // covUnits = cov_Units(P);\n  }\n\n  return (\n    <div style={{ marginTop: \"1rem\" }}>\n      {/* <div style={{ marginTop: \"1rem\" }}> */}\n      <h3 style={{ margin: \"0.3rem 0\" }}>📈 예상 수익률 그래프</h3>\n      <div className=\"Description\">\n        <span>초기 투자 금액: </span>\n        <Box sx={{ display: \"flex\" }}>\n          <FormControl variant=\"standard\">\n            <Input\n              id=\"초기투자금액\"\n              value={P}\n              onChange={P_handlChange}\n              endAdornment={\n                <InputAdornment position=\"end\">만원</InputAdornment>\n              }\n              size=\"small\"\n              sx={{ width: \"100px\", ml: \"0.5rem\" }}\n            />\n          </FormControl>\n        </Box>\n      </div>\n      <ComposedChart\n        width={400}\n        height={250}\n        margin={{ top: 20, bottom: 20 }}\n        data={data}\n      >\n        <XAxis dataKey=\"year\" tick={{ fontSize: 10 }} padding={{ right: 20 }} />\n        <YAxis\n          // unit={covUnits}\n          unit=\"만원\"\n          domain={[\"auto\", \"auto\"]}\n          tick={{ fontSize: 10 }}\n          padding={{ bottom: 10 }}\n        />\n        <Tooltip />\n        <Legend tick={{ fontSize: 10 }} />\n        <CartesianGrid stroke=\"#f4f4f4\" />\n        <Area\n          // unit={covUnits}\n          unit=\"만원\"\n          type=\"monotone\"\n          dataKey=\"예상수익범위\"\n          fill=\"#FFB950\"\n          stroke=\"#FFB950\"\n        />\n        <Line\n          // unit={covUnits}\n          unit=\"만원\"\n          type=\"monotone\"\n          dataKey=\"예상수익\"\n          stroke=\"#1D1A82\"\n        />\n        <Line\n          // unit={covUnits}\n          unit=\"만원\"\n          type=\"monotone\"\n          dataKey=\"현재가치\"\n          stroke=\"#B45CCA\"\n        />\n      </ComposedChart>\n      <div className=\"Description\">\n        <span style={{ marginRight: \"0.3rem\" }}>매년 </span>\n        <Box sx={{ display: \"flex\" }}>\n          <FormControl variant=\"standard\" size=\"small\">\n            <Select\n              labelId=\"contribution-select-label\"\n              id=\"contribution-select\"\n              value={PMT}\n              label=\"만원\"\n              onChange={CON_handleChange}\n              defaultValue={0}\n            >\n              {Contribution.map((Value, index) => {\n                return (\n                  <MenuItem key={index} value={Value}>\n                    {Value}만원\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </Box>\n        <span style={{ marginLeft: \"0.3rem\", marginRight: \"0.3rem\" }}>\n          {\" \"}\n          을 적립했을 때{\" \"}\n        </span>\n        <Box sx={{ display: \"flex\" }}>\n          <FormControl variant=\"standard\">\n            <Select\n              labelId=\"year-select-label\"\n              id=\"year-select\"\n              value={Period}\n              label=\"년\"\n              onChange={PER_handleChange}\n              defaultValue={0}\n            >\n              {Year.map((Value, index) => {\n                return (\n                  <MenuItem key={index} value={Value}>\n                    {Value}년\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </Box>\n        <span> 뒤의 </span>\n        <span>\n          예상 수익은{\" \"}\n          <b>\n            {data[Period / 5].예상수익}\n            {/* {covUnits} */}\n            만원\n          </b>\n          입니다.\n          <br />\n          (현재 가치로 환산시{\" \"}\n          <b>\n            {data[Period / 5].현재가치}\n            {/* {covUnits} */}\n            만원\n          </b>\n          )\n        </span>\n      </div>\n      {/* </div> */}\n    </div>\n  );\n}\n\nexport default ProfitGraph;\n",["223","224"],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/Pension.js",[],[],"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/GBIGraph.js",[],[],{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","severity":2,"message":"230","line":5,"column":5,"nodeType":"231","endLine":5,"endColumn":14},{"ruleId":"229","severity":2,"message":"232","line":49,"column":33,"nodeType":"231","endLine":49,"endColumn":41},{"ruleId":"229","severity":2,"message":"232","line":50,"column":27,"nodeType":"231","endLine":50,"endColumn":35},{"ruleId":"233","severity":1,"message":"234","line":80,"column":14,"nodeType":"231","messageId":"235","endLine":80,"endColumn":24},{"ruleId":"233","severity":1,"message":"236","line":95,"column":14,"nodeType":"231","messageId":"235","endLine":95,"endColumn":26},{"ruleId":"225","replacedBy":"237"},{"ruleId":"227","replacedBy":"238"},{"ruleId":"233","severity":1,"message":"234","line":80,"column":12,"nodeType":"231","messageId":"235","endLine":80,"endColumn":22},{"ruleId":"233","severity":1,"message":"236","line":95,"column":12,"nodeType":"231","messageId":"235","endLine":95,"endColumn":24},{"ruleId":"225","replacedBy":"239"},{"ruleId":"227","replacedBy":"240"},"no-native-reassign",["241"],"no-negated-in-lhs",["242"],"react-hooks/rules-of-hooks","React Hook \"useEffect\" is called in function \"test\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","Identifier","React Hook \"useState\" is called in function \"profitGraph\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","no-unused-vars","'Cal_Simple' is defined but never used.","unusedVar","'Cal_Compound' is defined but never used.",["241"],["242"],["241"],["242"],"no-global-assign","no-unsafe-negation"]